{
  "name": "flogo-grpc-trigger",
  "type": "flogo:trigger",
  "shim": "plugin",
  "version": "0.3.11",
  "title": "Codelity Flogo gRPC Trigger",
  "description": "gRPC Trigger",
  "ref":"github.com/codelity-co/flogo-grpc-trigger",
  "homepage": "https://github.com/codelity-co/flogo-grpc-trigger",
  "settings": [
    {
      "name": "enabled",
      "type": "boolean",
      "required": true,
      "value": true,
      "allowed": [true, false],
      "description": "Enable GRPC Trigger"
    },
    {
      "name": "grpcPort",
      "type": "int",
      "required": true,
      "value": 50051,
      "description": "grpc port"
    },
    {
      "name": "protoName",
      "type": "string",
      "required": true,
      "description": "The name of the proto file"
    },
    {
      "name": "protoFile",
      "type": "string",
      "description": "The content of the proto file"
    },
    {
      "name":"enableTLS",
      "type":"boolean",
      "value": false,
      "description": "true - To enable TLS (Transport Layer Security), false - No TLS security"
    },
    {
      "name": "serverCert",
      "type": "string",
      "description": "Server certificate file in PEM format. Need to provide file name along with path. Path can be relative to gateway binary location."
    },
    {
      "name": "serverKey",
      "type": "string",
      "description": "Server private key file in PEM format. Need to provide file name along with path. Path can be relative to gateway binary location."
    },
    {
      "name": "enableGrpcGateway",
      "type": "boolean",
      "description": "Enable gRPC Gateway",
      "value": false
    },
    {
      "name": "httpPort",
      "type": "int",
      "required": true,
      "value": 8080,
      "description": "http/https port"
    }
  ],
  "output": [
    {
      "name": "params",
      "type": "object",
      "description": "gRPC Request params"
    },
    {
      "name": "grpcData",
      "type": "object",
      "description": "gRPC request data"
    },
    {
      "name": "protobufRequestMap",
      "type": "object",
      "description": "Protobuf Request Map"
    }
  ],
  "reply": [
    {
      "name": "code",
      "type": "integer",
      "description": "Status code"
    },
    {
      "name": "data",
      "type": "any",
      "description": "data"
    }
  ],
  "handler": {
    "settings": [
      {
        "name": "serviceName",
        "type": "string",
        "description": "Name of the service"
      },
      {
        "name": "methodName",
        "type": "string",
        "description": "Name of the method"
      }
    ]
  }
}
